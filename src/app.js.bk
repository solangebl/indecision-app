class IndecisionApp extends React.Component {
  constructor(props) {
    super(props);

    this.handleDeleteOptions = this.handleDeleteOptions.bind(this);
    this.handleDeleteOption = this.handleDeleteOption.bind(this);
    this.handlePick = this.handlePick.bind(this);
    this.handleAddOption = this.handleAddOption.bind(this);

    this.state = {
      options: props.options
    }
  }
  componentDidMount() {
    try {
      const json = localStorage.getItem('options');
      const ops = JSON.parse(json);
      if (ops) {
        this.setState( () => ( { options: ops} ) );
      }
    } catch (e) {
      
    }
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevState.options.length != this.state.options.length) {
      const json = JSON.stringify(this.state.options);
      localStorage.setItem('options', json);
    }
  }
  handleDeleteOptions() {
    this.setState(() => ({ options: []} ) );
  }
  handleDeleteOption(toRemove) {
    this.setState((prevState) => ({ 
      options: prevState.options.filter((option) => {
        option != toRemove
      })
    }));
  }
  handlePick() {
    const rand = Math.floor(Math.random() * this.state.options.length);
    const option = this.state.options[rand];
    alert(option);
  }
  handleAddOption(option) {
    if (!option) {
      return 'Enter valid option';
    } else if (this.state.options.indexOf(option) != -1) {
      return 'Option already exists';
    }
    this.setState((prevState) => ({
      options: prevState.options.concat(option)
    }));
  }
  render() {
    const subtitle = 'Put your life in the hands of a computer';
    return (
      <div>
        <Header subtitle={subtitle} />
        <Action hasOptions={this.state.options.length>0} handlePick={this.handlePick} />
        <Options options={this.state.options} handleDelete={this.handleDeleteOptions} handleDeleteOption={this.handleDeleteOption} />
        <AddOption 
          handleAddOption={this.handleAddOption}
        />
      </div>
    )
  }
}

IndecisionApp.defaultProps = {
  options: []
}

const Header = (props) => {
  return (
    <div>
      <h1>{props.title}</h1>
      {props.subtitle && (<h2>{props.subtitle}</h2>)}
    </div>
  );
}

Header.defaultProps = {
  title: 'Indecision'
}

const Action = (props) => {
  return (
    <div>
      <button 
        disabled={!props.hasOptions}
        onClick={props.handlePick}
      >
      What should I do?</button> 
    </div>
  )
};

const Options = (props) => {
  return (
    <div>
      <button onClick={props.handleDelete}>Remove all</button>
      {props.options.length === 0 && <p>Please add some options to get started</p>}
      <ul>
        { props.options.map((opt) => (
          <Option 
            key={opt} 
            optionText={opt} 
            handleDelete={props.handleDeleteOption}  
          />)) }
      </ul>
    </div>
  );
};

const Option = (props) => {
  return (
    <li>
      {props.optionText}
      <button 
        onClick={(e) => {
          props.handleDelete(props.optionText)
        }}
      >
        Remove
      </button>  
    </li>
  );
};

class AddOption extends React.Component {
  constructor(props) {
    super(props);

    this.handleAddOption = this.handleAddOption.bind(this);

    this.state = {
      error: undefined
    };
  }
  handleAddOption(e) {
    e.preventDefault();
    const option = e.target.elements.option.value.trim();
    const error = this.props.handleAddOption(option);
    
    this.setState(() => ({
      error: error
    }) );
    if (!error) {
      e.target.elements.option.value = '';
    }
  }
  render() {
    return (
      <div>
        {this.state.error && <p>{this.state.error}</p>}
        <form onSubmit={this.handleAddOption}>
          <input type="text" name="option" />
          <button >Add Option</button>
        </form>
      </div>
    )
  }
}

ReactDOM.render(<IndecisionApp options={[]} />, document.getElementById('app'));